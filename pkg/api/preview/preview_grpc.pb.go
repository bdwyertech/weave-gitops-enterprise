//
// This file holds the protobuf definitions for the Preview API
// that can be used to generate previews of known Kubernetes
// resources in YAML.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/preview/preview.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PreviewService_GetYAML_FullMethodName           = "/preview.v1.PreviewService/GetYAML"
	PreviewService_CreatePullRequest_FullMethodName = "/preview.v1.PreviewService/CreatePullRequest"
)

// PreviewServiceClient is the client API for PreviewService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// PreviewService defines operations that are used for previewing YAML
// representations of known Kubernetes resources.
type PreviewServiceClient interface {
	// FIXME
	GetYAML(ctx context.Context, in *GetYAMLRequest, opts ...grpc.CallOption) (*GetYAMLResponse, error)
	// FIXME
	CreatePullRequest(ctx context.Context, in *CreatePullRequestRequest, opts ...grpc.CallOption) (*CreatePullRequestResponse, error)
}

type previewServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPreviewServiceClient(cc grpc.ClientConnInterface) PreviewServiceClient {
	return &previewServiceClient{cc}
}

func (c *previewServiceClient) GetYAML(ctx context.Context, in *GetYAMLRequest, opts ...grpc.CallOption) (*GetYAMLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetYAMLResponse)
	err := c.cc.Invoke(ctx, PreviewService_GetYAML_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *previewServiceClient) CreatePullRequest(ctx context.Context, in *CreatePullRequestRequest, opts ...grpc.CallOption) (*CreatePullRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePullRequestResponse)
	err := c.cc.Invoke(ctx, PreviewService_CreatePullRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PreviewServiceServer is the server API for PreviewService service.
// All implementations must embed UnimplementedPreviewServiceServer
// for forward compatibility.
//
// PreviewService defines operations that are used for previewing YAML
// representations of known Kubernetes resources.
type PreviewServiceServer interface {
	// FIXME
	GetYAML(context.Context, *GetYAMLRequest) (*GetYAMLResponse, error)
	// FIXME
	CreatePullRequest(context.Context, *CreatePullRequestRequest) (*CreatePullRequestResponse, error)
	mustEmbedUnimplementedPreviewServiceServer()
}

// UnimplementedPreviewServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPreviewServiceServer struct{}

func (UnimplementedPreviewServiceServer) GetYAML(context.Context, *GetYAMLRequest) (*GetYAMLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetYAML not implemented")
}
func (UnimplementedPreviewServiceServer) CreatePullRequest(context.Context, *CreatePullRequestRequest) (*CreatePullRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePullRequest not implemented")
}
func (UnimplementedPreviewServiceServer) mustEmbedUnimplementedPreviewServiceServer() {}
func (UnimplementedPreviewServiceServer) testEmbeddedByValue()                        {}

// UnsafePreviewServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PreviewServiceServer will
// result in compilation errors.
type UnsafePreviewServiceServer interface {
	mustEmbedUnimplementedPreviewServiceServer()
}

func RegisterPreviewServiceServer(s grpc.ServiceRegistrar, srv PreviewServiceServer) {
	// If the following call pancis, it indicates UnimplementedPreviewServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PreviewService_ServiceDesc, srv)
}

func _PreviewService_GetYAML_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetYAMLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PreviewServiceServer).GetYAML(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PreviewService_GetYAML_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PreviewServiceServer).GetYAML(ctx, req.(*GetYAMLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PreviewService_CreatePullRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePullRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PreviewServiceServer).CreatePullRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PreviewService_CreatePullRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PreviewServiceServer).CreatePullRequest(ctx, req.(*CreatePullRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PreviewService_ServiceDesc is the grpc.ServiceDesc for PreviewService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PreviewService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "preview.v1.PreviewService",
	HandlerType: (*PreviewServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetYAML",
			Handler:    _PreviewService_GetYAML_Handler,
		},
		{
			MethodName: "CreatePullRequest",
			Handler:    _PreviewService_CreatePullRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/preview/preview.proto",
}
